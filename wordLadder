class Solution {
    
    class Node{
        String word;
        int steps;
        public Node(String value, int stepCount){
            word = value;
            steps = stepCount;
        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
       LinkedList<Node> queue = new LinkedList<Node>();
        queue.add(new Node(beginWord, 1));
        Node current;
        while(!queue.isEmpty()){
            current = queue.poll();
            ListIterator<String> iterator = wordList.listIterator();
            while(iterator.hasNext()){
                String temp = iterator.next();
                if(diffByOne(current.word, temp) == 1){
                    if(temp.equals(endWord)){
                        return current.steps + 1;
                    }
                    queue.add(new Node(temp, current.steps + 1));
                    iterator.remove();
                }
            }
        }
        
        return 0;
    }

    public int diffByOne(String str1, String str2){
        int length = str1.length();
        int count = 0;
        for(int i = 0; i < length; i++){
            if(str1.charAt(i) != str2.charAt(i)){
                count ++; 
            }
            
        }
        return count;
    }
}
