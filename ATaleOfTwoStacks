import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

 
public class Solution {
    
    public static void main(String[] args) {
     
        MyQueue<Integer> queue = new MyQueue<Integer>();

        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();

        for (int i = 0; i < n; i++) {
            int operation = scan.nextInt();
            if (operation == 1) { // enqueue
              queue.enqueue(scan.nextInt());
            } else if (operation == 2) { // dequeue
              queue.dequeue();
            } else if (operation == 3) { // print/peek
              System.out.println(queue.peek());
            }
        }
        scan.close();
    }
  public static class MyQueue<T>{
       
       private T t;
       Stack<T> myStack = new Stack<T>(); 
       Stack<T> secondStack = new Stack<T>();
       private Integer count = myStack.size(); 
      public void enqueue(T t){
           myStack.push(t);
           count++;
       }
       public T dequeue(){ 
           if(myStack.isEmpty()) return null;
           for(int i = 0; i < count; i++){
               secondStack.push(myStack.pop());
           }
           T temp = secondStack.pop();
           count --;
           while(!secondStack.isEmpty()){
               myStack.push(secondStack.pop());
           }
           return temp;
       }
       public T peek(){
           if(myStack.isEmpty()) return null;
           for(int i = 0; i < count; i++){
               secondStack.push(myStack.pop());
           }
           T temp = secondStack.peek();
         
           while(!secondStack.isEmpty()){
               myStack.push(secondStack.pop());
           }
           return temp;
       }
    }

}
